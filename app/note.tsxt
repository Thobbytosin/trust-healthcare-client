"use client";

import { useState } from "react";
import Script from "next/script";

const PaymentForm = () => {
  const [email, setEmail] = useState("");
  const [amount, setAmount] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (typeof window !== "undefined" && typeof (window as any).BudPayCheckout === "function") {
      const reference =
        Math.floor(Math.random() * 100000000000 + 1) +
        new Date().getSeconds() +
        new Date().getMilliseconds();

      (window as any).BudPayCheckout({
        key: "pk_test_xolsnu5dpqpia2a7a8iftygugzyluz2qffkhlid", // Your public key
        email,
        amount,
        first_name: firstName,
        last_name: lastName,
        currency: "NGN",
        reference: reference.toString(),
        callback: function (response: any) {
          alert(`Payment complete! Reference: ${response.reference}, Status: ${response.status}`);
        },
        onClose: function (response: any) {
          console.log(response);
          alert("Transaction was not completed, window closed.");
        },
        custom_fields: {
          tax_pay_transaction: "",
          tax_pay_type: "",
          agency_code: "",
          revenue_code: "",
          revenue_credit_acc: "",
          cbn_code: "",
        },
      });
    } else {
      alert("BudPayCheckout function not available yet.");
    }
  };

  return (
    <div className="max-w-md mx-auto p-4 border rounded-md shadow-md">
      <Script
        src="https://inlinepay.budpay.com/budpay-inline-custom.js"
        strategy="afterInteractive"
        onLoad={() => console.log("BudPay script loaded!")}
      />

      <h2 className="text-xl font-semibold mb-4">Make a Payment</h2>

      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <input
          type="email"
          placeholder="Email"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="border px-4 py-2 rounded"
        />
        <input
          type="number"
          placeholder="Amount"
          required
          value={amount}
          onChange={(e) => setAmount(e.target.value)}
          className="border px-4 py-2 rounded"
        />
        <input
          type="text"
          placeholder="First Name"
          required
          value={firstName}
          onChange={(e) => setFirstName(e.target.value)}
          className="border px-4 py-2 rounded"
        />
        <input
          type="text"
          placeholder="Last Name"
          required
          value={lastName}
          onChange={(e) => setLastName(e.target.value)}
          className="border px-4 py-2 rounded"
        />

        <button
          type="submit"
          className="bg-primary text-white px-6 py-3 rounded hover:bg-primary/80"
        >
          Pay Now
        </button>
      </form>
    </div>
  );
};

export default PaymentForm;

import { useEffect, useState } from "react";

const UserLocation = () => {
  const [location, setLocation] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setLocation({ latitude, longitude });
          console.log("User location:", latitude, longitude);
        },
        (error) => {
          console.error("Error fetching location:", error);
          setError(error.message);
        }
      );
    } else {
      setError("Geolocation is not supported by your browser.");
    }
  }, []);

  return (
    <div>
      {location ? (
        <p>
          Latitude: {location.latitude}, Longitude: {location.longitude}
        </p>
      ) : (
        <p>{error ? error : "Fetching location..."}</p>
      )}
    </div>
  );
};

export default UserLocation;

const reverseGeocode = async (lat, lon) => {
  try {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`
    );

    const data = await response.json();
    console.log("Reverse geocode result:", data);

    // Example: get the display name (full address)
    console.log("Location name:", data.display_name);

    return data;
  } catch (error) {
    console.error("Error with reverse geocoding:", error);
  }
};

// Example usage:
const latitude = 6.5244;
const longitude = 3.3792;

reverseGeocode(latitude, longitude);


// const address = "The Westville Estate Praise Hill Arepo";
  // const apiKey = "AIzaSyBXIxkBjxzXpUdcEgL5rXY1j4k8r9QIOsY";

  // const fetchCoords = async () => {
  //   const res = await fetch(
  //     `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=${apiKey}`
  //   );

  //   const data = await res.json();

  //   console.log(data);
  // };


  'use client'; // Required for Google Maps integration

import { useEffect, useRef, useState } from 'react';

const ServiceRouteMap = () => {
  const mapRef = useRef(null);
  const [map, setMap] = useState(null);
  const [directionsRenderer, setDirectionsRenderer] = useState(null);
  const [userAddress, setUserAddress] = useState('');
  const [distanceInfo, setDistanceInfo] = useState(null);

  // Your KML file URL (hosted publicly)
  const KML_URL = "https://yourdomain.com/path/to/routes.kml"; 

  useEffect(() => {
    // Load Google Maps script dynamically
    const loadGoogleMaps = () => {
      if (!window.google) {
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places,geometry`;
        script.async = true;
        script.defer = true;
        script.onload = initMap;
        document.head.appendChild(script);
      } else {
        initMap();
      }
    };

    const initMap = () => {
      const mapInstance = new window.google.maps.Map(mapRef.current, {
        center: { lat: 0, lng: 0 },
        zoom: 12,
      });

      // Load KML layer
      new window.google.maps.KmlLayer({
        url: KML_URL,
        map: mapInstance,
        preserveViewport: true,
      });

      // Initialize directions renderer
      const renderer = new window.google.maps.DirectionsRenderer({
        suppressMarkers: true,
      });
      renderer.setMap(mapInstance);

      setMap(mapInstance);
      setDirectionsRenderer(renderer);
    };

    loadGoogleMaps();

    return () => {
      // Cleanup
      if (directionsRenderer) {
        directionsRenderer.setMap(null);
      }
    };
  }, []);

  const handleAddressSubmit = async (e) => {
    e.preventDefault();

    if (!userAddress || !map) return;

    try {
      // Geocode the address
      const geocoder = new window.google.maps.Geocoder();
      const { results } = await geocodeAddress(geocoder, userAddress);

      if (results && results[0]) {
        const userLocation = results[0].geometry.location;
        
        // In a real app, you would parse your KML to find the nearest service point
        // For this example, we'll use a hardcoded service point
        const servicePoint = new window.google.maps.LatLng(37.7749, -122.4194); // Replace with actual point from KML

        // Calculate distances
        const straightDistance = calculateStraightDistance(userLocation, servicePoint);
        const drivingDistance = await calculateDrivingDistance(userLocation, servicePoint);

        setDistanceInfo({
          address: results[0].formatted_address,
          straightDistance,
          drivingDistance,
          userLocation,
          servicePoint,
        });

        // Center map on user
        map.setCenter(userLocation);
        
        // Show route on map
        if (directionsRenderer) {
          await showRouteOnMap(userLocation, servicePoint);
        }
      }
    } catch (error) {
      console.error("Error:", error);
      alert("Could not process the address. Please try again.");
    }
  };

  const geocodeAddress = (geocoder, address) => {
    return new Promise((resolve, reject) => {
      geocoder.geocode({ address }, (results, status) => {
        if (status === 'OK') {
          resolve({ results, status });
        } else {
          reject(new Error(`Geocode error: ${status}`));
        }
      });
    });
  };

  const calculateStraightDistance = (point1, point2) => {
    return window.google.maps.geometry.spherical.computeDistanceBetween(point1, point2) / 1000;
  };

  const calculateDrivingDistance = async (origin, destination) => {
    return new Promise((resolve) => {
      const service = new window.google.maps.DirectionsService();
      service.route(
        {
          origin,
          destination,
          travelMode: 'DRIVING',
        },
        (response, status) => {
          if (status === 'OK') {
            const distance = response.routes[0].legs[0].distance.value / 1000;
            resolve(distance);
          } else {
            resolve(null);
          console.error('Directions request failed:', status);
          alert('Could not calculate driving route');
          directionsRenderer.setMap(null);
          }
        }
      );
    });
  };

  const showRouteOnMap = async (origin, destination) => {
    const service = new window.google.maps.DirectionsService();
    service.route(
      {
        origin,
        destination,
        travelMode: 'DRIVING',
      },
      (response, status) => {
        if (status === 'OK') {
          directionsRenderer.setDirections(response);
        }
      }
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      <form onSubmit={handleAddressSubmit} className="mb-6">
        <div className="flex gap-2">
          <input
            type="text"
            value={userAddress}
            onChange={(e) => setUserAddress(e.target.value)}
            placeholder="Enter your address"
            className="flex-1 p-2 border rounded"
            required
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Calculate Distance
          </button>
        </div>
      </form>

      <div ref={mapRef} className="w-full h-96 rounded-lg shadow-lg" />

      {distanceInfo && (
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <h3 className="text-lg font-semibold mb-2">Distance Information</h3>
          <p>
            <strong>Address:</strong> {distanceInfo.address}
          </p>
          <p>
            <strong>Straight-line distance:</strong> {distanceInfo.straightDistance.toFixed(2)} km
          </p>
          {distanceInfo.drivingDistance && (
            <p>
              <strong>Driving distance:</strong> {distanceInfo.drivingDistance.toFixed(2)} km
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default ServiceRouteMap;


import ServiceRouteMap from '@/components/ServiceRouteMap';

export default function Home() {
  return (
    <main className="min-h-screen p-8">
      <h1 className="text-3xl font-bold mb-8">Service Route Distance Calculator</h1>
      <ServiceRouteMap />
    </main>
  );
}

// Fetch and parse KML to get all service points
const response = await fetch(KML_URL);
const kmlText = await response.text();
const parser = new DOMParser();
const kmlDoc = parser.parseFromString(kmlText, 'text/xml');
// Extract coordinates from KML

// Find the closest service point to user
function findNearestPoint(userLatLng, servicePoints) {
  let nearest = null;
  let minDistance = Infinity;
  
  servicePoints.forEach(point => {
    const distance = google.maps.geometry.spherical.computeDistanceBetween(
      userLatLng,
      point
    );
    if (distance < minDistance) {
      minDistance = distance;
      nearest = point;
    }
  });
  
  return nearest;
}


const [isLoading, setIsLoading] = useState(false);

// In your submit handler:
try {
  setIsLoading(true);
  // ... geocode and calculate
} finally {
  setIsLoading(false);
}

// In your button:
<button disabled={isLoading}>
  {isLoading ? 'Calculating...' : 'Calculate Distance'}
</button>

'use client';
import { useState } from 'react';

export default function DistanceCalculator() {
  const [address, setAddress] = useState('');
  const [walkingDistance, setWalkingDistance] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const KML_URL = "https://yourdomain.com/routes.kml"; // Your KML URL

  const calculateDistance = async () => {
    if (!address) return;
    
    setIsLoading(true);
    try {
      // 1. Load Google Maps script dynamically
      if (!window.google) {
        await loadGoogleMaps();
      }

      // 2. Geocode the address
      const geocoder = new window.google.maps.Geocoder();
      const { results } = await geocodeAddress(geocoder, address);
      
      if (results?.[0]) {
        const userLocation = results[0].geometry.location;
        
        // 3. Get nearest service point from KML (simplified example)
        // In production, you'd parse your KML to find the actual nearest point
        const servicePoint = await getNearestServicePoint(userLocation);
        
        // 4. Calculate walking distance
        const distance = await getWalkingDistance(userLocation, servicePoint);
        setWalkingDistance(distance);
      }
    } catch (error) {
      console.error("Error calculating distance:", error);
      alert("Could not calculate distance. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper functions
  const loadGoogleMaps = () => {
    return new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=geometry,places`;
      script.onload = resolve;
      document.head.appendChild(script);
    });
  };

  const geocodeAddress = (geocoder, address) => {
    return new Promise((resolve, reject) => {
      geocoder.geocode({ address }, (results, status) => {
        status === 'OK' ? resolve({ results }) : reject(new Error(status));
      });
    });
  };

  const getNearestServicePoint = async (userLocation) => {
    // Mock implementation - replace with actual KML parsing
    // In reality, you would:
    // 1. Fetch KML file
    // 2. Parse to extract all service points
    // 3. Find closest point to userLocation
    return new window.google.maps.LatLng(37.7749, -122.4194); // Example point
  };

  const getWalkingDistance = (origin, destination) => {
    return new Promise((resolve) => {
      const service = new window.google.maps.DirectionsService();
      service.route(
        {
          origin,
          destination,
          travelMode: 'WALKING',
        },
        (response, status) => {
          if (status === 'OK') {
            const meters = response.routes[0].legs[0].distance.value;
            resolve((meters / 1000).toFixed(2)); // Convert to km
          } else {
            console.error('Walking directions failed:', status);
            // Fallback to straight-line distance
            const meters = window.google.maps.geometry.spherical.computeDistanceBetween(
              origin,
              destination
            );
            resolve((meters / 1000).toFixed(2));
          }
        }
      );
    });
  };

  return (
    <div className="max-w-md mx-auto p-4">
      <div className="space-y-4">
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          placeholder="Enter your address"
          className="w-full p-2 border rounded"
        />
        <button
          onClick={calculateDistance}
          disabled={isLoading}
          className="w-full bg-blue-600 text-white p-2 rounded disabled:bg-gray-400"
        >
          {isLoading ? 'Calculating...' : 'Get Walking Distance'}
        </button>
        
        {walkingDistance !== null && (
          <div className="p-4 bg-gray-100 rounded text-center">
            <p className="font-bold">Walking distance to nearest service point:</p>
            <p className="text-2xl">{walkingDistance} km</p>
          </div>
        )}
      </div>
    </div>
  );
}

'use client';
import { useState } from 'react';

const WalkingDistanceCalculator = () => {
  const [address, setAddress] = useState('');
  const [distance, setDistance] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const KML_SERVICE_POINTS = [
    { lat: 37.7749, lng: -122.4194 }, // Example points - replace with your KML data
    { lat: 37.7849, lng: -122.4294 },
    { lat: 37.7949, lng: -122.4394 }
  ];

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!address.trim()) return;

    setIsLoading(true);
    setError(null);

    try {
      // 1. Load Google Maps if needed
      if (!window.google) {
        await loadGoogleMaps();
      }

      // 2. Convert address to coordinates
      const userLocation = await geocodeAddress(address);

      // 3. Find nearest service point
      const nearestPoint = findNearestPoint(
        userLocation, 
        KML_SERVICE_POINTS.map(p => new window.google.maps.LatLng(p.lat, p.lng))
      );

      // 4. Calculate walking distance
      const distanceKm = await getWalkingDistanceKm(userLocation, nearestPoint);
      setDistance(distanceKm);

    } catch (err) {
      setError(err.message || 'Failed to calculate distance');
    } finally {
      setIsLoading(false);
    }
  };

  // Helper Functions
  const loadGoogleMaps = () => {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&libraries=places,geometry`;
      script.onload = resolve;
      script.onerror = () => reject(new Error('Failed to load Google Maps'));
      document.head.appendChild(script);
    });
  };

  const geocodeAddress = async (address) => {
    const geocoder = new window.google.maps.Geocoder();
    return new Promise((resolve, reject) => {
      geocoder.geocode({ address }, (results, status) => {
        if (status === 'OK' && results[0]) {
          resolve(results[0].geometry.location);
        } else {
          reject(new Error('Address not found'));
        }
      });
    });
  };

  const findNearestPoint = (userLocation, servicePoints) => {
    return servicePoints.reduce((nearest, point) => {
      const currentDist = window.google.maps.geometry.spherical.computeDistanceBetween(userLocation, point);
      return currentDist < nearest.distance ? { point, distance: currentDist } : nearest;
    }, { point: null, distance: Infinity }).point;
  };

  const getWalkingDistanceKm = async (origin, destination) => {
    return new Promise((resolve) => {
      new window.google.maps.DirectionsService().route(
        {
          origin,
          destination,
          travelMode: 'WALKING'
        },
        (response, status) => {
          if (status === 'OK') {
            resolve((response.routes[0].legs[0].distance.value / 1000).toFixed(2));
          } else {
            // Fallback to straight-line distance
            const meters = window.google.maps.geometry.spherical.computeDistanceBetween(
              origin,
              destination
            );
            resolve((meters / 1000).toFixed(2));
          }
        }
      );
    });
  };

  return (
    <div className="max-w-md mx-auto p-4 border rounded-lg shadow-sm">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="address" className="block text-sm font-medium mb-1">
            Enter your address
          </label>
          <input
            id="address"
            type="text"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            className="w-full p-2 border rounded"
            placeholder="e.g. 123 Main St, City"
          />
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 disabled:bg-gray-400"
        >
          {isLoading ? 'Calculating...' : 'Get Distance'}
        </button>
      </form>

      {error && (
        <div className="mt-4 p-3 bg-red-100 text-red-700 rounded">
          {error}
        </div>
      )}

      {distance !== null && !error && (
        <div className="mt-6 p-4 bg-green-50 rounded-lg text-center">
          <p className="font-semibold">Walking distance to nearest service point:</p>
          <p className="text-3xl font-bold mt-2">{distance} km</p>
        </div>
      )}
    </div>
  );
};

export default WalkingDistanceCalculator;

// Example: Get walking distance with Mapbox
const response = await fetch(
  `https://api.mapbox.com/directions/v5/mapbox/walking/${userLng},${userLat};${serviceLng},${serviceLat}?access_token=YOUR_TOKEN`
);
const data = await response.json();
const distanceKm = data.routes[0].distance / 1000; 

1. Mapbox (Recommended Alternative)
Best for: Modern web apps with custom styling
Features:

Directions API with walking distance

KML/GeoJSON support

Free tier: 100,000 requests/month
Implementation:

